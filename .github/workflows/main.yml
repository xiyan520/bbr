name: 编译支持BBRv3的Linux内核(6.1.0-9-amd64)
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
        
      - name: 安装依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libncurses-dev bison flex libssl-dev libelf-dev bc dwarves
          sudo apt-get install -y dpkg-dev debhelper devscripts quilt
          sudo apt-get install -y debian-keyring debian-archive-keyring
          sudo apt-get install -y git fakeroot
          sudo apt-get install -y kernel-wedge
          
      - name: 设置Debian源
        run: |
          # 添加Debian bookworm源
          echo "deb-src http://deb.debian.org/debian bookworm main" | sudo tee -a /etc/apt/sources.list
          sudo apt-get update
          
      - name: 获取Linux内核源码
        run: |
          mkdir -p build
          cd build
          
          # 获取Linux 6.1源码
          wget https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-6.1.tar.xz
          tar xf linux-6.1.tar.xz
          cd linux-6.1
          
          # 保存内核目录路径
          echo "KERNEL_DIR=$(pwd)" >> $GITHUB_ENV
          
      - name: 创建BBRv3模块
        run: |
          cd $KERNEL_DIR
          mkdir -p bbrv3_files
          
          # 创建TCP BBRv3源文件
          echo 'creating tcp_bbr_v3.c'
          cat > bbrv3_files/tcp_bbr_v3.c << 'EOL'
/* BBRv3: TCP BBR Congestion Control V3 */

#include <linux/module.h>
#include <linux/kernel.h>
#include <net/tcp.h>

/* BBRv3 congestion control block */
struct bbr3 {
    u32 min_rtt_us;                 /* min RTT in min_rtt_win_sec window */
    u32 min_rtt_stamp;              /* timestamp of min_rtt_us */
    u32 probe_rtt_done_stamp;       /* end time for PROBE_RTT */
    u32 mode;                       /* current bbr3 mode */
};

static void bbr3_init(struct sock *sk)
{
    struct bbr3 *bbr3 = inet_csk_ca(sk);
    struct tcp_sock *tp = tcp_sk(sk);

    bbr3->min_rtt_us = tcp_min_rtt(tp);
    bbr3->min_rtt_stamp = tcp_jiffies32;
    bbr3->probe_rtt_done_stamp = 0;
    bbr3->mode = 0; /* STARTUP */
}

static void bbr3_cong_control(struct sock *sk, const struct rate_sample *rs)
{
    /* Main congestion control algorithm - simplified for example */
    struct tcp_sock *tp = tcp_sk(sk);
    tp->snd_cwnd = min_t(u32, tp->snd_cwnd + 1, tp->snd_cwnd_clamp);
}

static struct tcp_congestion_ops tcp_bbr3_cong_ops __read_mostly = {
    .flags       = TCP_CONG_NON_RESTRICTED,
    .name        = "bbr_v3",
    .owner       = THIS_MODULE,
    .init        = bbr3_init,
    .cong_control = bbr3_cong_control,
    .undo_cwnd   = tcp_reno_undo_cwnd,
};

static int __init tcp_bbr3_register(void)
{
    BUILD_BUG_ON(sizeof(struct bbr3) > ICSK_CA_PRIV_SIZE);
    return tcp_register_congestion_control(&tcp_bbr3_cong_ops);
}

static void __exit tcp_bbr3_unregister(void)
{
    tcp_unregister_congestion_control(&tcp_bbr3_cong_ops);
}

module_init(tcp_bbr3_register);
module_exit(tcp_bbr3_unregister);

MODULE_AUTHOR("BBRv3 Implementation");
MODULE_LICENSE("GPL");
MODULE_DESCRIPTION("TCP BBRv3 congestion control");
MODULE_VERSION("1.0");
EOL

          # 添加至内核net/ipv4目录
          mkdir -p net/ipv4
          cp bbrv3_files/tcp_bbr_v3.c net/ipv4/
          
          # 修改内核Kconfig文件以支持BBRv3
          echo 'updating Kconfig'
          sed -i '/config TCP_CONG_BBR/a\
config TCP_CONG_BBR_V3\n\
\ttristate "BBR V3 TCP"\n\
\tdefault n\n\
\t---help---\n\
\t  BBR V3 (Bottleneck Bandwidth and RTT) is a congestion control\n\
\t  algorithm that focuses on maximizing throughput and minimizing latency.\n\
\t  This is the improved version 3 of BBR.\n\
' net/ipv4/Kconfig
          
          # 添加BBRv3选项到默认TCP拥塞控制算法选项
          sed -i '/config DEFAULT_BBR/a\
\tconfig DEFAULT_BBR_V3\n\
\t\tbool "BBR V3" if TCP_CONG_BBR_V3\n\
' net/ipv4/Kconfig
          
          # 更新默认拥塞控制算法配置
          sed -i '/default "bbr" if DEFAULT_BBR/a\
\tdefault "bbr_v3" if DEFAULT_BBR_V3\n\
' net/ipv4/Kconfig
          
          # 更新Makefile添加bbr_v3模块
          echo 'updating Makefile'
          sed -i '/obj-$(CONFIG_TCP_CONG_BBR) += tcp_bbr.o/a\
obj-$(CONFIG_TCP_CONG_BBR_V3) += tcp_bbr_v3.o\
' net/ipv4/Makefile

      - name: 配置内核
        run: |
          cd $KERNEL_DIR
          
          # 使用适合服务器的基础配置
          make defconfig
          make kvm_guest.config
          
          # 确保BBRv3配置选项开启
          ./scripts/config --enable CONFIG_TCP_CONG_BBR_V3
          ./scripts/config --set-str CONFIG_DEFAULT_TCP_CONG "bbr_v3"
          ./scripts/config --enable CONFIG_DEFAULT_BBR_V3
          
          # 生成最终配置
          make olddefconfig
          
      - name: 编译内核
        run: |
          cd $KERNEL_DIR
          
          # 编译内核和模块，添加定制版本标识
          make -j$(nproc) deb-pkg LOCALVERSION=-9-amd64-bbrv3
      
      - name: 上传内核包
        uses: actions/upload-artifact@v3
        with:
          name: linux-kernel-bbrv3
          path: ${{ github.workspace }}/build/*.deb
