name: 编译 Linux 6.1.0-9-amd64 内核 (使用 BBRv3 配置)

on:
  # 手动触发工作流
  workflow_dispatch:

jobs:
  build_kernel:
    # 使用最新的 Ubuntu runner，目前通常是 Ubuntu 24.04 LTS (Noble Numbat)
    runs-on: ubuntu-latest

    steps:
    - name: 准备环境和工具链
      run: |
        echo "--> 第一次 apt-get update"
        # 更新 apt 包列表 (第一次)
        sudo apt-get update
        echo "<-- 第一次 apt-get update 完成"

        echo "--> 添加标准的 deb-src 仓库到 sources.list"
        # 动态获取 Ubuntu 版本代号 (例如 noble)
        UBUNTU_CODENAME=$(lsb_release -sc)
        echo "检测到 Ubuntu 版本代号: $UBUNTU_CODENAME"

        # 添加主要的 deb-src 源 (main, restricted, universe, multiverse)
        # 使用 tee -a 以 root 权限追加到文件末尾
        echo "deb-src http://archive.ubuntu.com/ubuntu/ $UBUNTU_CODENAME main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
        echo "deb-src http://archive.ubuntu.com/ubuntu/ $UBUNTU_CODENAME-updates main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
        echo "deb-src http://archive.ubuntu.com/ubuntu/ $UBUNTU_CODENAME-security main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
        echo "deb-src http://archive.ubuntu.com/ubuntu/ $UBUNTU_CODENAME-backports main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list

        # (可选但无害) 再次尝试取消注释已存在的 deb-src 行，以防万一格式不同
        # sudo sed -i 's/^#\s*deb-src/deb-src/' /etc/apt/sources.list
        echo "<-- 添加 deb-src 仓库完成"

        echo "--> 第二次 apt-get update (加载 deb-src 信息)"
        # 再次更新 apt 包列表以加载新添加的 deb-src 信息
        sudo apt-get update
        echo "<-- 第二次 apt-get update 完成"

        echo "--> 运行 apt-get build-dep linux"
        # 安装编译内核所需的大部分依赖。依赖于上面启用的 deb-src 源
        sudo apt-get build-dep linux -y
        echo "<-- apt-get build-dep linux 完成"

        # 安装编译 .deb 包所需的额外工具 (移除了 kernel-package)
        echo "--> 安装额外的构建工具"
        sudo apt-get install -y fakeroot ncurses-dev xz-utils libssl-dev build-essential cpio flex bison libelf-dev libncurses-dev libslang2-dev rsync
        echo "<-- 安装额外的构建工具完成"

    - name: 克隆 Linux 内核源码 (v6.1 分支)
      run: |
        echo "--> 克隆 Linux 内核源码"
        # 克隆主线 Linux 内核仓库，获取 v6.1 分支
        git clone https://github.com/torvalds/linux.git kernel-source
        # 进入源码目录
        cd kernel-source
        # 切换到 v6.1 分支
        git checkout v6.1
        echo "<-- 克隆 Linux 内核源码完成"

    - name: 准备内核配置 (.config) 并启用 BBR
      run: |
        echo "--> 准备内核配置"
        cd kernel-source

        # 使用 defconfig 生成基础配置
        make defconfig

        # 确保 BBR 和 FQ (Fair Queueing, BBR 推荐搭配) 被启用
        # 查找并替换或添加配置项
        echo "CONFIG_TCP_CONG_BBR=y" >> .config
        echo "CONFIG_NET_SCH_FQ=y" >> .config

        # 运行 oldconfig 以处理新添加的或冲突的配置项
        # 非交互模式下，它会接受默认值或跳过需要用户输入的选项
        make oldconfig

        # 再次检查 BBR 和 FQ 是否已启用 (可选)
        grep CONFIG_TCP_CONG_BBR .config || echo "Warning: CONFIG_TCP_CONG_BBR not found or not enabled in .config"
        grep CONFIG_NET_SCH_FQ .config || echo "Warning: CONFIG_NET_SCH_FQ not found or not enabled in .config"
        echo "<-- 准备内核配置完成"

    - name: 编译内核和模块，生成 Debian 包
      run: |
        echo "--> 编译内核和模块"
        cd kernel-source
        # 设置环境变量，make deb-pkg 需要这些信息
        export DEBEMAIL="github_actions@example.com" # 你的邮件地址
        export DEBFULLNAME="GitHub Actions" # 你的名字

        # --- 添加这行来禁用将警告视为错误 (解决格式字符串编译错误) ---
        export KCFLAGS="-Wno-error"
        # ------------------------------------------------------

        # 使用 make bindeb-pkg 编译内核、模块并生成 .deb 安装包
        # -j $(nproc) 使用所有可用的 CPU 核心进行并行编译
        make -j $(nproc) bindeb-pkg
        echo "<-- 编译内核和模块完成"

    - name: 上传生成的 Debian 包
      # 使用上传产物的 action
      uses: actions/upload-artifact@v4
      with:
        # 产物名称
        name: kernel-debs
        # 指定上传路径。make bindeb-pkg 将 .deb 包放在源码目录的上一级 (即仓库根目录)
        # actions/upload-artifact@v4 不允许相对路径 ../*，所以直接指定当前目录下的 .deb 文件
        path: '*.deb'
      env:
        # 启用步骤调试日志 (可选，帮助排查上传问题)
        ACTIONS_STEP_DEBUG: true
